// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using libraryApp.backend.Entity;

#nullable disable

namespace libraryApp.backend.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20240929163959_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("libraryApp.backend.Entity.Book", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("number_of_pages")
                        .HasColumnType("integer");

                    b.Property<bool>("status")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            id = 1,
                            number_of_pages = 10,
                            status = true,
                            title = "test1",
                            type = "psycho"
                        },
                        new
                        {
                            id = 2,
                            number_of_pages = 220,
                            status = true,
                            title = "test2",
                            type = "thriller"
                        },
                        new
                        {
                            id = 3,
                            number_of_pages = 320,
                            status = true,
                            title = "test3",
                            type = "fantasy"
                        },
                        new
                        {
                            id = 4,
                            number_of_pages = 140,
                            status = false,
                            title = "test4",
                            type = "mystery"
                        },
                        new
                        {
                            id = 5,
                            number_of_pages = 250,
                            status = true,
                            title = "test5",
                            type = "non-fiction"
                        },
                        new
                        {
                            id = 6,
                            number_of_pages = 190,
                            status = true,
                            title = "test6",
                            type = "science fiction"
                        },
                        new
                        {
                            id = 7,
                            number_of_pages = 270,
                            status = false,
                            title = "test7",
                            type = "romance"
                        },
                        new
                        {
                            id = 8,
                            number_of_pages = 330,
                            status = true,
                            title = "test8",
                            type = "horror"
                        },
                        new
                        {
                            id = 9,
                            number_of_pages = 410,
                            status = true,
                            title = "test9",
                            type = "biography"
                        },
                        new
                        {
                            id = 10,
                            number_of_pages = 200,
                            status = false,
                            title = "test10",
                            type = "history"
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.BookAuthor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("bookId")
                        .HasColumnType("integer");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("bookId");

                    b.HasIndex("userId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            id = 1,
                            bookId = 1,
                            userId = 1
                        },
                        new
                        {
                            id = 2,
                            bookId = 2,
                            userId = 2
                        },
                        new
                        {
                            id = 3,
                            bookId = 3,
                            userId = 3
                        },
                        new
                        {
                            id = 4,
                            bookId = 4,
                            userId = 4
                        },
                        new
                        {
                            id = 5,
                            bookId = 5,
                            userId = 5
                        },
                        new
                        {
                            id = 6,
                            bookId = 6,
                            userId = 1
                        },
                        new
                        {
                            id = 7,
                            bookId = 7,
                            userId = 2
                        },
                        new
                        {
                            id = 8,
                            bookId = 8,
                            userId = 3
                        },
                        new
                        {
                            id = 9,
                            bookId = 9,
                            userId = 4
                        },
                        new
                        {
                            id = 10,
                            bookId = 10,
                            userId = 5
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.BookPublishRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("bookId")
                        .HasColumnType("integer");

                    b.Property<bool>("confirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("pending")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("requestDate")
                        .HasColumnType("date");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("bookId");

                    b.HasIndex("userId");

                    b.ToTable("BookPublishRequests");

                    b.HasData(
                        new
                        {
                            id = 1,
                            bookId = 2,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 1
                        },
                        new
                        {
                            id = 2,
                            bookId = 3,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 2
                        },
                        new
                        {
                            id = 3,
                            bookId = 4,
                            confirmation = true,
                            pending = false,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 3
                        },
                        new
                        {
                            id = 4,
                            bookId = 5,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 4
                        },
                        new
                        {
                            id = 5,
                            bookId = 6,
                            confirmation = true,
                            pending = false,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 5
                        },
                        new
                        {
                            id = 6,
                            bookId = 7,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 1
                        },
                        new
                        {
                            id = 7,
                            bookId = 8,
                            confirmation = true,
                            pending = false,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 2
                        },
                        new
                        {
                            id = 8,
                            bookId = 9,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 3
                        },
                        new
                        {
                            id = 9,
                            bookId = 10,
                            confirmation = true,
                            pending = false,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 4
                        },
                        new
                        {
                            id = 10,
                            bookId = 1,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 5
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.LoanRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("bookId")
                        .HasColumnType("integer");

                    b.Property<bool>("confirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("isReturned")
                        .HasColumnType("boolean");

                    b.Property<bool>("pending")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("requestDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("returnDate")
                        .HasColumnType("date");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("bookId");

                    b.HasIndex("userId");

                    b.ToTable("LoanRequests");

                    b.HasData(
                        new
                        {
                            id = 1,
                            bookId = 1,
                            confirmation = false,
                            isReturned = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 29),
                            returnDate = new DateOnly(2024, 10, 6),
                            userId = 1
                        },
                        new
                        {
                            id = 2,
                            bookId = 2,
                            confirmation = true,
                            isReturned = true,
                            pending = false,
                            requestDate = new DateOnly(2024, 9, 29),
                            returnDate = new DateOnly(2024, 10, 6),
                            userId = 2
                        },
                        new
                        {
                            id = 3,
                            bookId = 3,
                            confirmation = false,
                            isReturned = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 29),
                            returnDate = new DateOnly(2024, 10, 6),
                            userId = 3
                        },
                        new
                        {
                            id = 4,
                            bookId = 4,
                            confirmation = true,
                            isReturned = false,
                            pending = false,
                            requestDate = new DateOnly(2024, 9, 29),
                            returnDate = new DateOnly(2024, 10, 6),
                            userId = 4
                        },
                        new
                        {
                            id = 5,
                            bookId = 5,
                            confirmation = false,
                            isReturned = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 29),
                            returnDate = new DateOnly(2024, 10, 6),
                            userId = 5
                        },
                        new
                        {
                            id = 6,
                            bookId = 6,
                            confirmation = true,
                            isReturned = false,
                            pending = false,
                            requestDate = new DateOnly(2024, 9, 29),
                            returnDate = new DateOnly(2024, 10, 6),
                            userId = 1
                        },
                        new
                        {
                            id = 7,
                            bookId = 7,
                            confirmation = false,
                            isReturned = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 29),
                            returnDate = new DateOnly(2024, 10, 6),
                            userId = 2
                        },
                        new
                        {
                            id = 8,
                            bookId = 8,
                            confirmation = true,
                            isReturned = false,
                            pending = false,
                            requestDate = new DateOnly(2024, 9, 29),
                            returnDate = new DateOnly(2024, 10, 6),
                            userId = 3
                        },
                        new
                        {
                            id = 9,
                            bookId = 9,
                            confirmation = false,
                            isReturned = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 29),
                            returnDate = new DateOnly(2024, 10, 6),
                            userId = 4
                        },
                        new
                        {
                            id = 10,
                            bookId = 10,
                            confirmation = true,
                            isReturned = false,
                            pending = false,
                            requestDate = new DateOnly(2024, 9, 29),
                            returnDate = new DateOnly(2024, 10, 6),
                            userId = 5
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Message", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isRead")
                        .HasColumnType("boolean");

                    b.Property<int>("recieverId")
                        .HasColumnType("integer");

                    b.Property<int>("senderId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("sendingDate")
                        .HasColumnType("date");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("senderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            id = 1,
                            content = "Hello!",
                            isRead = false,
                            recieverId = 2,
                            senderId = 1,
                            sendingDate = new DateOnly(2024, 9, 29),
                            title = "Greetings"
                        },
                        new
                        {
                            id = 2,
                            content = "How are you?",
                            isRead = true,
                            recieverId = 3,
                            senderId = 2,
                            sendingDate = new DateOnly(2024, 9, 29),
                            title = "Check-in"
                        },
                        new
                        {
                            id = 3,
                            content = "Meeting tomorrow?",
                            isRead = false,
                            recieverId = 4,
                            senderId = 3,
                            sendingDate = new DateOnly(2024, 9, 29),
                            title = "Meeting"
                        },
                        new
                        {
                            id = 4,
                            content = "Check your email",
                            isRead = false,
                            recieverId = 5,
                            senderId = 4,
                            sendingDate = new DateOnly(2024, 9, 29),
                            title = "Reminder"
                        },
                        new
                        {
                            id = 5,
                            content = "Let's catch up",
                            isRead = true,
                            recieverId = 1,
                            senderId = 5,
                            sendingDate = new DateOnly(2024, 9, 29),
                            title = "Catch-up"
                        },
                        new
                        {
                            id = 6,
                            content = "Project update",
                            isRead = false,
                            recieverId = 2,
                            senderId = 1,
                            sendingDate = new DateOnly(2024, 9, 29),
                            title = "Update"
                        },
                        new
                        {
                            id = 7,
                            content = "Great job!",
                            isRead = false,
                            recieverId = 3,
                            senderId = 2,
                            sendingDate = new DateOnly(2024, 9, 29),
                            title = "Praise"
                        },
                        new
                        {
                            id = 8,
                            content = "Next steps?",
                            isRead = true,
                            recieverId = 4,
                            senderId = 3,
                            sendingDate = new DateOnly(2024, 9, 29),
                            title = "Discussion"
                        },
                        new
                        {
                            id = 9,
                            content = "See you soon",
                            isRead = false,
                            recieverId = 5,
                            senderId = 4,
                            sendingDate = new DateOnly(2024, 9, 29),
                            title = "Goodbye"
                        },
                        new
                        {
                            id = 10,
                            content = "Congrats!",
                            isRead = false,
                            recieverId = 1,
                            senderId = 5,
                            sendingDate = new DateOnly(2024, 9, 29),
                            title = "Congratulations"
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Page", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("bookId")
                        .HasColumnType("integer");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("pageNumber")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("bookId");

                    b.ToTable("Pages");

                    b.HasData(
                        new
                        {
                            id = 1,
                            bookId = 1,
                            content = "Page content 1",
                            pageNumber = 1
                        },
                        new
                        {
                            id = 2,
                            bookId = 1,
                            content = "Page content 2",
                            pageNumber = 2
                        },
                        new
                        {
                            id = 3,
                            bookId = 2,
                            content = "Page content 1",
                            pageNumber = 1
                        },
                        new
                        {
                            id = 4,
                            bookId = 2,
                            content = "Page content 2",
                            pageNumber = 2
                        },
                        new
                        {
                            id = 5,
                            bookId = 3,
                            content = "Page content 1",
                            pageNumber = 1
                        },
                        new
                        {
                            id = 6,
                            bookId = 3,
                            content = "Page content 2",
                            pageNumber = 2
                        },
                        new
                        {
                            id = 7,
                            bookId = 4,
                            content = "Page content 1",
                            pageNumber = 1
                        },
                        new
                        {
                            id = 8,
                            bookId = 4,
                            content = "Page content 2",
                            pageNumber = 2
                        },
                        new
                        {
                            id = 9,
                            bookId = 5,
                            content = "Page content 1",
                            pageNumber = 1
                        },
                        new
                        {
                            id = 10,
                            bookId = 5,
                            content = "Page content 2",
                            pageNumber = 2
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Point", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateOnly>("earnDate")
                        .HasColumnType("date");

                    b.Property<int>("point")
                        .HasColumnType("integer");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Points");

                    b.HasData(
                        new
                        {
                            id = 1,
                            earnDate = new DateOnly(2024, 9, 29),
                            point = 10,
                            userId = 1
                        },
                        new
                        {
                            id = 2,
                            earnDate = new DateOnly(2024, 9, 29),
                            point = 20,
                            userId = 2
                        },
                        new
                        {
                            id = 3,
                            earnDate = new DateOnly(2024, 9, 29),
                            point = 30,
                            userId = 3
                        },
                        new
                        {
                            id = 4,
                            earnDate = new DateOnly(2024, 9, 29),
                            point = 40,
                            userId = 4
                        },
                        new
                        {
                            id = 5,
                            earnDate = new DateOnly(2024, 9, 29),
                            point = 50,
                            userId = 5
                        },
                        new
                        {
                            id = 6,
                            earnDate = new DateOnly(2024, 9, 29),
                            point = 60,
                            userId = 1
                        },
                        new
                        {
                            id = 7,
                            earnDate = new DateOnly(2024, 9, 29),
                            point = 70,
                            userId = 2
                        },
                        new
                        {
                            id = 8,
                            earnDate = new DateOnly(2024, 9, 29),
                            point = 80,
                            userId = 3
                        },
                        new
                        {
                            id = 9,
                            earnDate = new DateOnly(2024, 9, 29),
                            point = 90,
                            userId = 4
                        },
                        new
                        {
                            id = 10,
                            earnDate = new DateOnly(2024, 9, 29),
                            point = 100,
                            userId = 5
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Punishment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("fineAmount")
                        .HasColumnType("integer");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("punishmentDate")
                        .HasColumnType("date");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Punishments");

                    b.HasData(
                        new
                        {
                            id = 1,
                            fineAmount = 5,
                            isActive = true,
                            punishmentDate = new DateOnly(2024, 9, 29),
                            userId = 1
                        },
                        new
                        {
                            id = 2,
                            fineAmount = 10,
                            isActive = true,
                            punishmentDate = new DateOnly(2024, 9, 29),
                            userId = 3
                        },
                        new
                        {
                            id = 3,
                            fineAmount = 15,
                            isActive = false,
                            punishmentDate = new DateOnly(2024, 9, 29),
                            userId = 1
                        },
                        new
                        {
                            id = 4,
                            fineAmount = 20,
                            isActive = true,
                            punishmentDate = new DateOnly(2024, 9, 29),
                            userId = 2
                        },
                        new
                        {
                            id = 5,
                            fineAmount = 25,
                            isActive = false,
                            punishmentDate = new DateOnly(2024, 9, 29),
                            userId = 1
                        },
                        new
                        {
                            id = 6,
                            fineAmount = 30,
                            isActive = true,
                            punishmentDate = new DateOnly(2024, 9, 29),
                            userId = 3
                        },
                        new
                        {
                            id = 7,
                            fineAmount = 35,
                            isActive = true,
                            punishmentDate = new DateOnly(2024, 9, 29),
                            userId = 2
                        },
                        new
                        {
                            id = 8,
                            fineAmount = 40,
                            isActive = false,
                            punishmentDate = new DateOnly(2024, 9, 29),
                            userId = 1
                        },
                        new
                        {
                            id = 9,
                            fineAmount = 45,
                            isActive = true,
                            punishmentDate = new DateOnly(2024, 9, 29),
                            userId = 4
                        },
                        new
                        {
                            id = 10,
                            fineAmount = 50,
                            isActive = false,
                            punishmentDate = new DateOnly(2024, 9, 29),
                            userId = 1
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.RegisterRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("confirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("pending")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("requestDate")
                        .HasColumnType("date");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("RegisterRequests");

                    b.HasData(
                        new
                        {
                            id = 1,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 1
                        },
                        new
                        {
                            id = 2,
                            confirmation = true,
                            pending = false,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 2
                        },
                        new
                        {
                            id = 3,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 3
                        },
                        new
                        {
                            id = 4,
                            confirmation = true,
                            pending = false,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 4
                        },
                        new
                        {
                            id = 5,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 5
                        },
                        new
                        {
                            id = 6,
                            confirmation = true,
                            pending = false,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 1
                        },
                        new
                        {
                            id = 7,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 2
                        },
                        new
                        {
                            id = 8,
                            confirmation = true,
                            pending = false,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 3
                        },
                        new
                        {
                            id = 9,
                            confirmation = false,
                            pending = true,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 4
                        },
                        new
                        {
                            id = 10,
                            confirmation = true,
                            pending = false,
                            requestDate = new DateOnly(2024, 9, 29),
                            userId = 5
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            id = 1,
                            name = "member"
                        },
                        new
                        {
                            id = 2,
                            name = "manager"
                        },
                        new
                        {
                            id = 3,
                            name = "staff"
                        },
                        new
                        {
                            id = 4,
                            name = "author"
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("roleId")
                        .HasColumnType("integer");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("userStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("roleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            id = 1,
                            email = "test1@ex.com",
                            name = "Alice",
                            password = "pass123",
                            roleId = 1,
                            surname = "Smith",
                            userStatus = true,
                            username = "alice_smith"
                        },
                        new
                        {
                            id = 2,
                            email = "test2@ex.com",
                            name = "Bob",
                            password = "pass456",
                            roleId = 2,
                            surname = "Johnson",
                            userStatus = true,
                            username = "bob_johnson"
                        },
                        new
                        {
                            id = 3,
                            email = "test3@ex.com",
                            name = "Charlie",
                            password = "pass789",
                            roleId = 1,
                            surname = "Brown",
                            userStatus = false,
                            username = "charlie_brown"
                        },
                        new
                        {
                            id = 4,
                            email = "test4@ex.com",
                            name = "Diana",
                            password = "pass321",
                            roleId = 2,
                            surname = "Wright",
                            userStatus = true,
                            username = "diana_wright"
                        },
                        new
                        {
                            id = 5,
                            email = "test5@ex.com",
                            name = "Eve",
                            password = "pass654",
                            roleId = 1,
                            surname = "Davis",
                            userStatus = true,
                            username = "eve_davis"
                        },
                        new
                        {
                            id = 6,
                            email = "test6@ex.com",
                            name = "Frank",
                            password = "pass987",
                            roleId = 2,
                            surname = "Clark",
                            userStatus = false,
                            username = "frank_clark"
                        },
                        new
                        {
                            id = 7,
                            email = "test7@ex.com",
                            name = "Grace",
                            password = "pass147",
                            roleId = 1,
                            surname = "Lewis",
                            userStatus = true,
                            username = "grace_lewis"
                        },
                        new
                        {
                            id = 8,
                            email = "test8@ex.com",
                            name = "Henry",
                            password = "pass258",
                            roleId = 2,
                            surname = "Walker",
                            userStatus = true,
                            username = "henry_walker"
                        },
                        new
                        {
                            id = 9,
                            email = "test9@ex.com",
                            name = "Ivy",
                            password = "pass369",
                            roleId = 1,
                            surname = "Allen",
                            userStatus = false,
                            username = "ivy_allen"
                        },
                        new
                        {
                            id = 10,
                            email = "test10@ex.com",
                            name = "Jack",
                            password = "pass1234",
                            roleId = 2,
                            surname = "Young",
                            userStatus = true,
                            username = "jack_young"
                        });
                });

            modelBuilder.Entity("libraryApp.backend.Entity.BookAuthor", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("libraryApp.backend.Entity.User", "User")
                        .WithMany("BookAuthors")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.BookPublishRequest", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.Book", "Book")
                        .WithMany("BookPublishRequests")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("libraryApp.backend.Entity.User", "User")
                        .WithMany("BookPublisRequests")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.LoanRequest", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.Book", "Book")
                        .WithMany("LoanRequest")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("libraryApp.backend.Entity.User", "User")
                        .WithMany("LoanRequests")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Message", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.User", "sender")
                        .WithMany("Messages")
                        .HasForeignKey("senderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sender");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Page", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.Book", "Book")
                        .WithMany("Pages")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Point", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.User", "User")
                        .WithMany("Points")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Punishment", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.User", "User")
                        .WithMany("Punishments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.RegisterRequest", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.User", "User")
                        .WithMany("RegisterRequests")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.User", b =>
                {
                    b.HasOne("libraryApp.backend.Entity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookPublishRequests");

                    b.Navigation("LoanRequest");

                    b.Navigation("Pages");
                });

            modelBuilder.Entity("libraryApp.backend.Entity.User", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookPublisRequests");

                    b.Navigation("LoanRequests");

                    b.Navigation("Messages");

                    b.Navigation("Points");

                    b.Navigation("Punishments");

                    b.Navigation("RegisterRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
